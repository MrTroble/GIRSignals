buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
	maven { url = "http://maven.cil.li/" }
	maven {
      url "https://plugins.gradle.org/m2/"
    }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: "com.matthewprenger.cursegradle"

def key = System.getenv("CURSETOKEN")
if(key == null)
	key = 'ddd'
curseforge {
  apiKey = key
  project {
    id = '440990'
    changelog = file('changelog.md')
    releaseType = 'beta'
    mainArtifact(jar) {
      relations {
        optionalDependency 'opencomputers'
      }
    }
  }
}

version = System.getenv("APPVEYOR_BUILD_VERSION")
group = 'net.gir.girsignals' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'GIRSignals'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    maven { url = "http://maven.cil.li/" }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

def ocVersion = "MC1.12.2-1.7.5.192"
def copyName = ""

dependencies {   
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
    compile "li.cil.oc:OpenComputers:$ocVersion:api"
    compile "li.cil.oc:OpenComputers:$ocVersion"
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "GIRSignals",
            "Specification-Vendor": "German Immersive Railroading Community",
            "Specification-Version": System.getenv("APPVEYOR_BUILD_VERSION"),
            "Implementation-Title": project.name,
            "Implementation-Version": System.getenv("APPVEYOR_BUILD_VERSION"),
            "Implementation-Vendor" :"German Immersive Railroading Community",
            "Implementation-Timestamp": new Date().format("dd-MM-yyyy'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')

tasks.getByName("eclipse").finalizedBy('update')
task update(type: Copy) {
	dependsOn "eclipse"
	def username = System.getenv("HOMEPATH")
    println("$username/.gradle/caches/modules-2/files-2.1/li.cil.oc/OpenComputers/$ocVersion/")
    def fl = new File("$username/.gradle/caches/modules-2/files-2.1/li.cil.oc/OpenComputers/$ocVersion/")
    if(fl.exists()) {
    	fl.eachDir() {
        	dire -> dire.eachFileMatch("OpenComputers-$ocVersion" + ".jar") {
         	   file2 -> copyName = file2.getAbsolutePath() 
        	}
    	}
        def filef = new File('run/mods')
        if(filef.exists()) {
		    filef.eachFile {
		    	file -> file.delete()
			}	
			if(copyName != "") {
    	    	from copyName
    	    	into 'run/mods'
    		}
        }
    }
}
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

/*publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
            //url "http://maven.cil.li/li/cil/oc/OpenComputer/"
        }
    }
}*/
