buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
		maven {
      		url "https://plugins.gradle.org/m2/"
    	}
    	maven { url = "http://maven.cil.li/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: "com.matthewprenger.cursegradle"

def ver = System.getenv("APPVEYOR_BUILD_VERSION")
if(ver == null)
	ver = 'dev'

def key = System.getenv("CURSETOKEN")
if(key == null)
	key = 'dev'
curseforge {
  apiKey = key
  project {
    id = '440990'
    changelog = file('changelog.md')
    releaseType = 'alpha'
    changelogType = 'markdown'
    mainArtifact(jar) {
      relations {
        optionalDependency 'opencomputers'
      }
    }
  }
}

version = ver
group = 'net.gir.girsignals'
archivesBaseName = 'GIRSignals'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

repositories {
    maven { url = "http://maven.cil.li/" }
}

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

def ocVersion = "MC1.12.2-1.7.5.192"
def copyName = ""

dependencies {   
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
    compile "li.cil.oc:OpenComputers:$ocVersion:api"
    compile "li.cil.oc:OpenComputers:$ocVersion"
}

jar {
    manifest {
        attributes([
            "Specification-Title": "GIRSignals",
            "Specification-Vendor": "German Immersive Railroading Community",
            "Specification-Version": ver,
            "Implementation-Title": project.name,
            "Implementation-Version": ver,
            "Implementation-Vendor" :"German Immersive Railroading Community",
            "Implementation-Timestamp": new Date().format("dd-MM-yyyy'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"               
        expand "version":ver
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

jar.finalizedBy('reobfJar')

tasks.getByName("eclipse").finalizedBy('update')
task update(type: Copy) {
	dependsOn "eclipse"
	def username = System.getenv("HOMEPATH")
    println("$username/.gradle/caches/modules-2/files-2.1/li.cil.oc/OpenComputers/$ocVersion/")
    def fl = new File("$username/.gradle/caches/modules-2/files-2.1/li.cil.oc/OpenComputers/$ocVersion/")
    if(fl.exists()) {
    	fl.eachDir() {
        	dire -> dire.eachFileMatch("OpenComputers-$ocVersion" + ".jar") {
         	   file2 -> copyName = file2.getAbsolutePath() 
        	}
    	}
        def filef = new File('run/mods')
        if(filef.exists()) {
		    filef.eachFile {
		    	file -> file.delete()
			}	
			if(copyName != "") {
    	    	from copyName
    	    	into 'run/mods'
    		}
        }
    }
}